// Description:
//    A hubot integration with Jenkins
//
// Configuration
//    HUBOT_JENKINS_URL - The URL of the jenkins instance where the jobs are configured.
//    HUBOT_SLACK_TOKEN - The token that is generated by slack. It must be configured in Jenkins as well.
//
// Commands:
//    hubot jobs|list jobs [job name] - List the current jobs, filtering by the job name if needed
//    hubot build <branch> on <job name> - Builds branch on the environment specified by the job
//    hubot create alias <alias> for <job name> - Creates an alias for the job
//    hubot aliases|list aliases - Displays the list of aliases
//    hubot remove alias <alias name> - Removes an alias

'use strict';

const TOKEN = process.env.HUBOT_SLACK_TOKEN;
const JENKINS_URL = process.env.HUBOT_JENKINS_URL;
const aliases = require(`${__dirname}/alias`);
const builder = require(`${__dirname}/build`);

module.exports = robot => {
  robot.respond(/(?:list|build)/i, response => {
    if (!TOKEN) {
      response.send(createMissingVariableErrorMessage('HUBOT_SLACK_TOKEN'));
    }
    if (!JENKINS_URL) {
      response.send(createMissingVariableErrorMessage('HUBOT_JENKINS_URL'));
    }
  });

  if (!TOKEN || !JENKINS_URL) {
    return;
  }

  robot.respond(/(?:list jobs|jobs)\s*(.*)/i, response => {
    listJobs(robot, response);
  });

  robot.respond(/build (\w+)-(\w+)-(.+)/i, response => {
    response.send('This command is not supported anymore. Please use build {branch} on {jobName}');
  });

  robot.respond(/build (.+) on (.+)/i, response => {
    const buildParams = {
      robot,
      response,
      aliases,
      JENKINS_URL,
      TOKEN
    };

    builder.build(buildParams);
  });

  robot.respond(/create alias (.+) for (.+)/i, response => {
    aliases.newAlias(robot, response);
  });

  robot.respond(/list aliases|aliases/i, response => {
    aliases.listAliases(robot, response);
  });

  robot.respond(/remove alias (.+)/i, response => {
    aliases.removeAlias(robot, response);
  });
};

function createMissingVariableErrorMessage(variableName) {
  return `Missing ${variableName} in environment. Please set it and try again.`;
}

function listJobs(robot, response) {
  const jobFilter = response.match[1].trim();

  robot.http(`${JENKINS_URL}/api/json`).get()((err, res, body) => {
    if (err) {
      console.log(err);
      response.send('Sorry, I could not get the list of jobs.');
      return;
    }

    let jobs = JSON.parse(body).jobs;

    if (jobFilter) {
      const regex = new RegExp(jobFilter, 'i');
      jobs = jobs.filter(job => regex.test(job.name));
    }

    const formattedResponse = jobs.reduce((msg, job) => {
      return `${msg}\n> ${job.name}`;
    }, 'Here is the list of jobs:\n');

    response.send(formattedResponse);
  });
}
